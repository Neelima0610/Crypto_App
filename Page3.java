/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Encrypt_Decrypt;

/**
 *
 * @author Neelima Rambabu
 */
import java.io.*;
import java.math.BigInteger;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.*;
import java.lang.Thread.*;
import java.io.File;

public class Page3 extends javax.swing.JFrame {

    /**
     * Creates new form Page3
     * 
     */
    private static final String PUBLIC_KEY_FILE = "Public.key";
    private static final String PRIVATE_KEY_FILE = "Private.key";
    public String decdata;
    public Page3() {
        initComponents();
        
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialog = new javax.swing.JDialog();
        encrd = new javax.swing.JRadioButton();
        ffrd = new javax.swing.JRadioButton();
        holder = new javax.swing.JPanel();
        holder1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gettxt = new javax.swing.JTextArea();
        enctxt = new javax.swing.JButton();
        gencipher = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        holder2 = new javax.swing.JPanel();
        filech = new javax.swing.JFileChooser();
        encfile = new javax.swing.JButton();
        getfile = new javax.swing.JTextField();
        select = new javax.swing.JButton();
        back = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        decrypt = new javax.swing.JButton();

        javax.swing.GroupLayout dialogLayout = new javax.swing.GroupLayout(dialog.getContentPane());
        dialog.getContentPane().setLayout(dialogLayout);
        dialogLayout.setHorizontalGroup(
            dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        dialogLayout.setVerticalGroup(
            dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(500, 700));
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        encrd.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        encrd.setForeground(new java.awt.Color(51, 0, 51));
        encrd.setText("Text Encryption");
        encrd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encrdActionPerformed(evt);
            }
        });

        ffrd.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        ffrd.setForeground(new java.awt.Color(51, 51, 0));
        ffrd.setText("File/Folder Enryption");
        ffrd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ffrdActionPerformed(evt);
            }
        });

        holder.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        holder.setAutoscrolls(true);
        holder.setPreferredSize(new java.awt.Dimension(700, 400));

        holder1.setMinimumSize(new java.awt.Dimension(669, 337));
        holder1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                holder1AncestorResized(evt);
            }
        });
        holder1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                holder1KeyPressed(evt);
            }
        });

        gettxt.setColumns(20);
        gettxt.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        gettxt.setRows(5);
        gettxt.setToolTipText("Enter your Text");
        gettxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gettxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                gettxtKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(gettxt);

        enctxt.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        enctxt.setText("ENCRYPTION");
        enctxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        enctxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enctxtActionPerformed(evt);
            }
        });

        gencipher.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        gencipher.setText("GENERATE CIPHER");
        gencipher.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gencipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gencipherActionPerformed(evt);
            }
        });

        display.setEditable(false);
        display.setColumns(10);
        display.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        display.setRows(5);
        display.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane2.setViewportView(display);

        javax.swing.GroupLayout holder1Layout = new javax.swing.GroupLayout(holder1);
        holder1.setLayout(holder1Layout);
        holder1Layout.setHorizontalGroup(
            holder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(holder1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(holder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(enctxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(116, 116, 116)
                .addGroup(holder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gencipher, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        holder1Layout.setVerticalGroup(
            holder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(holder1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(holder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(holder1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(enctxt, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, holder1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(gencipher, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        holder2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        filech.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filechActionPerformed(evt);
            }
        });

        encfile.setBackground(new java.awt.Color(102, 102, 102));
        encfile.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        encfile.setText("ENCRYPT");
        encfile.setBorder(null);
        encfile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        encfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encfileActionPerformed(evt);
            }
        });

        getfile.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N

        select.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        select.setText("SELECT");
        select.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout holder2Layout = new javax.swing.GroupLayout(holder2);
        holder2.setLayout(holder2Layout);
        holder2Layout.setHorizontalGroup(
            holder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(holder2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(holder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, holder2Layout.createSequentialGroup()
                        .addComponent(getfile, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filech, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(encfile, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        holder2Layout.setVerticalGroup(
            holder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(holder2Layout.createSequentialGroup()
                .addComponent(filech, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(holder2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(encfile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(getfile, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(select, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout holderLayout = new javax.swing.GroupLayout(holder);
        holder.setLayout(holderLayout);
        holderLayout.setHorizontalGroup(
            holderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(holderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(holder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(holderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(holder2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        holderLayout.setVerticalGroup(
            holderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(holderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(holder1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(holderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(holder2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        back.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        back.setText("BACK");
        back.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        clear.setText("CLEAR");
        clear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        clear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        decrypt.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        decrypt.setText("DECRYPT");
        decrypt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        decrypt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(176, 176, 176)
                        .addComponent(decrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(holder, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(encrd, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 217, Short.MAX_VALUE)
                        .addComponent(ffrd)
                        .addGap(31, 31, 31))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encrd, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ffrd, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(holder, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void encrdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encrdActionPerformed
        // TODO add your handling code here:
        if(encrd.isSelected())
        {   
            holder.removeAll();
                    holder.repaint();
            holder.revalidate();
            holder.add(holder1);
            holder.repaint();
            holder.revalidate();
            ffrd.setSelected(false);
            clear.setEnabled(true);
            
        }
    }//GEN-LAST:event_encrdActionPerformed
    public String filename;
    private void ffrdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ffrdActionPerformed
        // TODO add your handling code here:
        if(ffrd.isSelected())
        {
            clear.setEnabled(true);
            holder.removeAll();
            holder.repaint();
            holder.revalidate();
            holder.add(holder2);
             holder.repaint();
            holder.revalidate();
            encrd.setSelected(false);
        }   
    }//GEN-LAST:event_ffrdActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
          decrypt.setEnabled(false);
            display.setText("");
           clear.setEnabled(false);
           enctxt.setEnabled(false);
            gencipher.setEnabled(false);
            holder.removeAll();
            holder.repaint();
            holder.revalidate();
            if(encrd.isSelected())
            {
              holder.add(holder1);   
              
              
            }
            else if(ffrd.isSelected())
                    {
                        holder.add(holder1); 
                    }
    }//GEN-LAST:event_formWindowActivated

    private void enctxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enctxtActionPerformed
        // TODO add your handling code here:
       
            
            gencipher.setEnabled(true);
            if(gettxt.getText().trim().isEmpty())
            {
                             frame = new JFrame("Exit");
                    if(JOptionPane.showConfirmDialog(frame,"ENCRYPTION ERROR\nPlease Enter Any Text In The Filed\n\nDo you want to continue?","Encryption error",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_NO_OPTION)
                    {

                    }
                    else
                    {
                        System.exit(0);
                    }
          
            }
        else
            {
                try
                {     System.out.println("GENERATING PUBLIC AND PRIVATE KEYS\n");
                      KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
                      keyPairGenerator.initialize(2048);
                      KeyPair keyPair = keyPairGenerator.generateKeyPair();
                      PublicKey publicKey = keyPair.getPublic();
                      PrivateKey privateKey = keyPair.getPrivate();
                       System.out.println("PULLING OUT PARAMETERS\nWHICH MAKES KEY PAIR\n");
                      KeyFactory keyFactory = KeyFactory.getInstance("RSA");
                      RSAPublicKeySpec rsaPubKeySpec = keyFactory.getKeySpec(publicKey,RSAPublicKeySpec.class);
                      RSAPrivateKeySpec rsaPrivKeySpec = keyFactory.getKeySpec(privateKey,RSAPrivateKeySpec.class);
                       System.out.println("\nSAVING PUBLIC KEY\nAND PRIVATE KEY TO FILES");
                      Page3 rsaObj = new Page3();
                      rsaObj.saveKeys(PUBLIC_KEY_FILE,rsaPubKeySpec.getModulus(),rsaPubKeySpec.getPublicExponent());
                      rsaObj.saveKeys(PRIVATE_KEY_FILE,rsaPrivKeySpec.getModulus(),rsaPrivKeySpec.getPrivateExponent());
                      //Encrypt Data Using publickey
                     

                }
                catch(IOException| NoSuchAlgorithmException | InvalidKeySpecException e)
                {
                    System.out.println(e);
                }  
            }  
    }//GEN-LAST:event_enctxtActionPerformed
    public   byte[] encryptedData; 
    private void gencipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gencipherActionPerformed
        // TODO add your handling code here:
         
        Page3 rsaObj = new Page3(); 
      
        try {
            encryptedData = rsaObj.encryptData(gettxt.getText());
               
        
            if(gettxt.getText().trim().isEmpty())
            {
                             frame = new JFrame("Exit");
                    if(JOptionPane.showConfirmDialog(frame,"ENCRYPTION ERROR\nPlease Enter Any Text In The Field\n\nClick YES to continue or No to EXIT","Encryption error",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_NO_OPTION)
                    {

                    }
                    else
                    {
                        System.exit(0);
                    }
             
            }
            else
            {
                
                gettxt.setText("");
            String encdata = new String(encryptedData);
            display.append(encdata);
            decrypt.setEnabled(true);
             
            
            
            }
           
                    
           
        
        } catch (IOException ex) {
            Logger.getLogger(Page3.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Page3.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_gencipherActionPerformed

    private void filechActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filechActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filechActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        new Page2().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        if(encrd.isSelected())
        {
        gettxt.setText("");
        display.setText("");
        }
        else if(ffrd.isSelected())
        {
            getfile.setText("");
        }
    }//GEN-LAST:event_clearActionPerformed

    private void gettxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gettxtKeyTyped
        // TODO add your handling code here:
        enctxt.setEnabled(true);
    }//GEN-LAST:event_gettxtKeyTyped

    private void holder1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_holder1AncestorResized
        // TODO add your handling code here:
    }//GEN-LAST:event_holder1AncestorResized

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowStateChanged

    private void holder1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_holder1KeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_holder1KeyPressed

    private void decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptActionPerformed
        // TODO add your handling code here:
        Page3 rsaObj1 = new Page3(); 
        
        frame = new JFrame("Exit");
        if(JOptionPane.showConfirmDialog(frame,"Do you want to decrypt the cipher text?","Cipher Text Generated",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_NO_OPTION)
        {
            rsaObj1.decryptData(encryptedData);
        }
        else
        {
            
        }
                         
          
    }//GEN-LAST:event_decryptActionPerformed
    private JFrame frame1;
    private void encfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encfileActionPerformed
        // TODO add your handling code here:
        Encryptorfile en = Encryptorfile.getEncrypter(true);
         folder = getfile.getText();
             File src = new File(folder);	
        en.encrypt(src, src);
        if(getfile.getText().trim().isEmpty())
        {
             frame1 = new JFrame("File");
        if(JOptionPane.showConfirmDialog(frame1,"SORRY!!!!NO FILE DETECTED  SELECT ANY FILE\nDo you want to continue?","FILE ENCRYPTION",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_NO_OPTION)
        {
           
        }
        else
        {
            System.exit(0);
        }
                      
        }
        else
        {
        frame1 = new JFrame("File");
        if(JOptionPane.showConfirmDialog(frame1,"FILE ENCRYPTED SUCCESSFULLY\n"+folder+"Do you want to continue?","FILE ENCRYPTION",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_NO_OPTION)
        {
           
        }
        else
        {
            System.exit(0);
        }
        }                
    }//GEN-LAST:event_encfileActionPerformed
   public String folder;
    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        // TODO add your handling code here:
        File f = filech.getSelectedFile();
            filename = f.getAbsolutePath();
            getfile.setText(filename);
           
            
            
       
    }//GEN-LAST:event_selectActionPerformed
     private void saveKeys(String fileName,BigInteger mod,BigInteger exp)throws IOException
     {
         FileOutputStream fos = null;
         ObjectOutputStream oos = null;
         try
         {
              System.out.println("Generating"+fileName+"...");
             fos = new FileOutputStream(fileName);
             oos = new ObjectOutputStream(new BufferedOutputStream(fos));
             oos.writeObject(mod);
             oos.writeObject(exp);
              System.out.println(fileName+"  generated successfully...");
         }
         catch(Exception e)
         {
             e.printStackTrace();             
         }
         finally
         {
             if(oos != null)
             {
                 oos.close();
                 if(fos != null)
                 {
                     fos.close();
                 }
             }
         }
     }
     private JFrame frame;
     private byte[] encryptData(String data)throws IOException, ClassNotFoundException
     {
       System.out.println("ENCRYPTION STARTED\n\n");
      System.out.println("Before Encryption :"+data+"\n\n");
      byte[] dataToEncrypt = data.getBytes();
      byte[] encryptedData = null;
      try
      {
          PublicKey pubKey = readPublicKeyFromFile(this.PUBLIC_KEY_FILE);
          
          Cipher cipher = Cipher.getInstance("RSA");
          
          cipher.init(Cipher.ENCRYPT_MODE, pubKey);
          
          encryptedData = cipher.doFinal(dataToEncrypt);
           System.out.println("");
           System.out.println("Encrypted Data :"+ encryptedData);  
           
           
           
      }
      
      catch(NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e)
      {
          e.printStackTrace();
      }
       System.out.println("Encryption Completed\n");
      
      return encryptedData;
     }
     
     private void decryptData(byte[] data) 
     {
          System.out.println("\tDECRYPTION STARTED");
         
         byte[] decryptedData = null;
         try
         {
         PrivateKey privateKey = readPrivateKeyFromFile(this.PRIVATE_KEY_FILE);
             
              
         Cipher cipher = Cipher.getInstance("RSA");
          
         cipher.init(Cipher.DECRYPT_MODE, privateKey);
          
         decryptedData = cipher.doFinal(data);
         
         System.out.println("Decrypted Data :"+ new String(decryptedData));
          
         
         
                 frame = new JFrame("Exit");
                    if(JOptionPane.showConfirmDialog(frame,"Original Data : "+new String(decryptedData)+"\n\nDo you want to continue?","DECRYPTED DATA",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_NO_OPTION)
                    {

                    }
                    else
                    {
                        System.exit(0);
                    }
           
         
           
           
           
         }
         catch(IOException | IllegalBlockSizeException | BadPaddingException | InvalidKeyException | NoSuchAlgorithmException | NoSuchPaddingException | ClassNotFoundException e)
         {
             e.printStackTrace();
         }
          
          
          System.out.println("---DECRYPTION COMPLETED--");
     }
     public PublicKey readPublicKeyFromFile(String fileName) throws IOException, ClassNotFoundException, NoSuchAlgorithmException
     {
         FileInputStream fis = null;
         ObjectInputStream ois = null;
         try
         {
             fis =  new FileInputStream(new File(fileName));
             ois =  new ObjectInputStream(fis);
             BigInteger modulus = (BigInteger) ois.readObject();
             BigInteger exponent = (BigInteger) ois.readObject();
             
             RSAPublicKeySpec rsaPublicKeySpec = new RSAPublicKeySpec(modulus,exponent);
             KeyFactory fact = KeyFactory.getInstance("RSA");
             PublicKey publicKey = fact.generatePublic(rsaPublicKeySpec);
             return publicKey;
             
             
         }
         catch(IOException |ClassNotFoundException | InvalidKeySpecException  e)
      {
          e.printStackTrace();
      }
         finally
         {
             if(ois!=null)
             {
                 ois.close();
                 if(fis!=null)
                 {
                     fis.close();
                 }
             }
         }
         return null;
     }
     
     public PrivateKey readPrivateKeyFromFile(String fileName) throws IOException, ClassNotFoundException, NoSuchAlgorithmException
     {
         FileInputStream fis = null;
         ObjectInputStream ois = null;
         try
         {
             fis =  new FileInputStream(new File(fileName));
             ois =  new ObjectInputStream(fis);
             BigInteger modulus = (BigInteger) ois.readObject();
             BigInteger exponent = (BigInteger) ois.readObject();
             
             RSAPrivateKeySpec rsaPrivateKeySpec = new RSAPrivateKeySpec(modulus,exponent);
             KeyFactory fact = KeyFactory.getInstance("RSA");
             PrivateKey privateKey = fact.generatePrivate(rsaPrivateKeySpec);
             return privateKey;
             
             
         }
         catch(IOException |ClassNotFoundException | InvalidKeySpecException  e)
      {
          e.printStackTrace();
      }
         finally
         {
             if(ois!=null)
             {
                 ois.close();
                 if(fis!=null)
                 {
                     fis.close();
                 }
             }
         }
         return null;
     }
    /**
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Page3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton clear;
    private javax.swing.JButton decrypt;
    private javax.swing.JDialog dialog;
    private javax.swing.JTextArea display;
    private javax.swing.JButton encfile;
    private javax.swing.JRadioButton encrd;
    public javax.swing.JButton enctxt;
    private javax.swing.JRadioButton ffrd;
    private javax.swing.JFileChooser filech;
    public javax.swing.JButton gencipher;
    private javax.swing.JTextField getfile;
    private javax.swing.JTextArea gettxt;
    private javax.swing.JPanel holder;
    private javax.swing.JPanel holder1;
    private javax.swing.JPanel holder2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton select;
    // End of variables declaration//GEN-END:variables
}
